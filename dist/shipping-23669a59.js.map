{"version":3,"sources":["webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["AccordionContext","onToggle","state","getContextValue","selectedItemId","handleToggleItem","id","isDisabled","onSelect","setState","render","children","className","defaultSelectedItemId","Provider","value","this","ChecklistContext","undefined","connectFormik","setFieldValue","name","handleSelect","contextValue","props","OriginalComponent","InnerComponent","formik","prevFormik","nextFormik","prevProps","nextProps","DecoratedComponent","displayName","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","node","done","addEventListener","target","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","type","Label","htmlFor","content","htmlId","label","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","rest","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","result","item","i","addedByPromotion","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","address","handleSelectAddress","alt","src","map","nameId","optionName","AddressSelect","selectedAddress","shippingAddress","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","inputName","isLoading","shippingOptions","selectedShippingOptionId","onSelectedOption","length","LoadingOverlay","Checklist","selectDefaultShippingOptions","selectShippingOption","getConsignments","find","selectedShippingOption","availableShippingOptions","recommendedOption","isRecommended","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","slice","sort","a","b","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","TranslatedString","StaticAddress","StaticConsignmentItemList","handleSubmit","mapPropsToValues","shippingOptionIds","forEach","subscribeToConsignmentsSelector","checkoutService","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","statuses","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","shippingQuoteFailedMessage","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","Error","ShippingOptions","OrderComments","Button","variant","Primary","items","itemKey","assignItem","onUnhandledError","getFields","isValidAddress","countryCode","syncItems","hasSelectedShippingOptions","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItemIds","filter","includes","findNewItemId","updatedItems","updateShippableItems","currentItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","createAccountUrl","href","onClick","preventDefault","TranslatedHtml","url","Form","hasUnassignedLineItems","withLanguage","values","onSubmit","orderComment","customerMessage","enableReinitialize","labelContent","CheckboxFormField","handleFieldValueChange","onFieldChange","Promise","initialize","deinitialize","containerId","formFields","tabIndex","custom","AddressFormField","parentFieldName","addressFieldName","fieldName","fieldValue","formFieldName","handleAutocompleteToggle","isOpen","inputValue","onAddressSelect","shouldShowSaveAddress","countries","countriesWithAutocomplete","googleMapsApiKey","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","AddressForm","formAddress","onAutocompleteToggle","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","Tiny","testId","Secondary","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","initializeShipping","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","params","include","shouldShowBillingSameAsShipping","some","autoComplete","addressForm","updatedShippingAddress","mapAddressFromFormValues","contextType","billingSameAsShipping","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","formValues","getAddressCustomFieldsValidationSchema","onMultiShippingSubmit","onSingleShippingSubmit","signOut","onMultiShippingChange","shouldShowMultiShipping","handleSingleShippingSubmit","updateCheckout","updateShippingAddress","updateBillingAddress","navigateNextStep","billingAddress","addressValues","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","isInitializing","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","hasSaveAddressFeature","onToggleMultiShipping","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","checkoutSettings","enableOrderComments","features","hasMultiShippingEnabled","links","shippableItemsCount","assignItemsToAddress","createAccountLink","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-23669a59.js","sourcesContent":["import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string);\n    }, [\n        id,\n        onUseNewAddress,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .slice(0, isMultiShippingMode ? undefined : 1)\n                .sort((a, b) => (a.id > b.id ? -1 : 1))\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nfunction mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    createAccountUrl: string;\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onUseNewAddress,\n            onSignIn,\n            createAccountUrl,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n        } = this.props;\n\n        const { items } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedHtml\n                        data={ { url: createAccountUrl } }\n                        id=\"shipping.multishipping_guest_create\"\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Form>\n                <ul className=\"consignmentList\">\n                    { items.map(item => (\n                        <li key={ item.key }>\n                            <ItemAddressSelect\n                                addresses={ addresses }\n                                item={ item }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ onUseNewAddress }\n                            />\n                        </li>\n                    )) }\n                </ul>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading }\n                    isMultiShippingMode={ true }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                />\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n    const updatedItems: ShippableItem[] = [];\n\n    items.forEach((item, i) => {\n        const id = newId && (i === updatedItemIndex || !cartItemIds.includes(item.id)) ?\n            newId : item.id;\n\n        updatedItems[i] = {\n            ...item,\n            id,\n            consignment: findConsignment(consignments || [], id  as string),\n        };\n    });\n\n    return updatedItems;\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AddressFormField } from '../address/';\nimport { Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <AddressFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AddressFormField, StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <AddressFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressCustomFieldsValidationSchema, getAddressValidationSchema, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1000;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                    {\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress,  customerMessage }) => ({\n        billingSameAsShipping: true,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressCustomFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    createAccountUrl: string;\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            createAccountUrl,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                createAccountUrl={ createAccountUrl }\n                customerMessage={ customerMessage }\n                getFields={ getFields }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(billingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    createAccountUrl: string;\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    hasSaveAddressFeature: boolean;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            hasSaveAddressFeature,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ onToggleMultiShipping }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest && hasSaveAddressFeature }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n        links,\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        createAccountUrl: links.createAccountLink,\n        customer,\n        customerMessage: checkout.customerMessage,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        hasSaveAddressFeature: features['CHECKOUT-4642.uco_save_address_checkbox'],\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress: getShippingAddress(),\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}