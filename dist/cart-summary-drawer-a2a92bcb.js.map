{"version":3,"sources":["webpack://checkout/./src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./src/app/order/getLineItemsCount.ts","webpack://checkout/./src/app/order/OrderSummaryModal.tsx","webpack://checkout/./src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./src/app/cart/CartSummaryDrawer.tsx"],"names":["state","isOpen","canHandleEvent","handleOpen","setState","handleClose","componentDidMount","this","componentWillUnmount","render","children","modal","onClick","onRequestClose","getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","renderHeader","headerLink","className","href","TranslatedString","id","IconClose","ModalHeader","additionalClassName","additionalLineItems","onAfterOpen","storeCurrency","shopperCurrency","lineItems","total","Modal","additionalBodyClassName","additionalHeaderClassName","header","OrderSummarySection","OrderSummaryItems","items","OrderSummarySubtotals","orderSummarySubtotalsProps","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","coupons","discountAmount","handlingAmount","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","storeCreditAmount","subtotalAmount","taxes","renderModal","props","ModalTrigger","productWithImage","imageUrl","alt","name","src","IconGiftCertificate","getImage","data","count","getItemsCount","ShopperCurrency","amount","cartUrl","url"],"mappings":"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","file":"cart-summary-drawer-a2a92bcb.js","sourcesContent":["import React, { Component, Fragment, MouseEventHandler, ReactNode } from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent: boolean = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <Fragment>\n                { children({ onClick: this.handleOpen }) }\n\n                { modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                }) }\n            </Fragment>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n}\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getLineItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    return physicalItems.length +\n        digitalItems.length +\n        giftCertificates.length +\n        (customItems || []).length;\n}\n","import { LineItemMap, ShopperCurrency as ShopperCurrencyType, StoreCurrency } from '@bigcommerce/checkout-sdk';\nimport React, { Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { IconClose } from '../ui/icon';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\n\nexport interface OrderSummaryDrawerProps {\n    additionalLineItems?: ReactNode;\n    lineItems: LineItemMap;\n    total: number;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    isOpen: boolean;\n    headerLink?: ReactNode;\n    onRequestClose?(): void;\n    onAfterOpen?(): void;\n}\n\nconst OrderSummaryModal: FunctionComponent<OrderSummaryDrawerProps & OrderSummarySubtotalsProps> = ({\n    additionalLineItems,\n    children,\n    onRequestClose,\n    onAfterOpen,\n    storeCurrency,\n    shopperCurrency,\n    isOpen,\n    headerLink,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => (\n<Modal\n    additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\n    additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary\"\n    header={ renderHeader({ headerLink, onRequestClose }) }\n    isOpen={ isOpen }\n    onAfterOpen={ onAfterOpen }\n    onRequestClose={ onRequestClose }\n>\n    <OrderSummarySection>\n        <OrderSummaryItems items={ lineItems } />\n    </OrderSummarySection>\n    <OrderSummarySection>\n        <OrderSummarySubtotals\n            { ...orderSummarySubtotalsProps }\n        />\n        { additionalLineItems }\n    </OrderSummarySection>\n    <OrderSummarySection>\n        <OrderSummaryTotal\n            orderAmount={ total }\n            shopperCurrencyCode={ shopperCurrency.code }\n            storeCurrencyCode={ storeCurrency.code }\n        />\n    </OrderSummarySection>\n</Modal>\n);\n\nconst renderHeader: FunctionComponent<{\n    headerLink: ReactNode;\n    onRequestClose?(): void;\n}> = ({\n    onRequestClose,\n    headerLink,\n}) => (<Fragment>\n    <a\n        className=\"cart-modal-close\"\n        href=\"javascript:void(0);\"\n        onClick={ onRequestClose }\n    >\n        <span className=\"is-srOnly\">\n            <TranslatedString id=\"common.close_action\" />\n        </span>\n        <IconClose />\n    </a>\n    <ModalHeader additionalClassName=\"cart-modal-title\">\n        <TranslatedString id=\"cart.cart_heading\" />\n    </ModalHeader>\n\n    { headerLink }\n</Fragment>);\n\nexport default OrderSummaryModal;\n","import { LineItemMap, ShopperCurrency as ShopperCurrencyType, StoreCurrency } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\nimport { IconGiftCertificate } from '../ui/icon';\nimport { ModalTrigger } from '../ui/modal';\n\nimport getItemsCount from './getItemsCount';\nimport getLineItemsCount from './getLineItemsCount';\nimport OrderSummaryModal from './OrderSummaryModal';\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\n\nexport interface OrderSummaryDrawerProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummaryDrawer: FunctionComponent<OrderSummaryDrawerProps & OrderSummarySubtotalsProps> = ({\n    additionalLineItems,\n    coupons,\n    discountAmount,\n    giftCertificates,\n    handlingAmount,\n    headerLink,\n    lineItems,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n    shippingAmount,\n    shopperCurrency,\n    storeCreditAmount,\n    storeCurrency,\n    subtotalAmount,\n    taxes,\n    total,\n}) => {\n    const renderModal = useCallback(props => (\n        <OrderSummaryModal\n            { ...props }\n            additionalLineItems={ additionalLineItems }\n            coupons={ coupons }\n            discountAmount={ discountAmount }\n            giftCertificates={ giftCertificates }\n            handlingAmount={ handlingAmount }\n            headerLink={ headerLink }\n            lineItems={ lineItems }\n            onRemovedCoupon={ onRemovedCoupon }\n            onRemovedGiftCertificate={ onRemovedGiftCertificate }\n            shippingAmount={ shippingAmount }\n            shopperCurrency={ shopperCurrency }\n            storeCreditAmount={ storeCreditAmount }\n            storeCurrency={ storeCurrency }\n            subtotalAmount={ subtotalAmount }\n            taxes={ taxes }\n            total={ total }\n        />\n    ), [\n        additionalLineItems,\n        coupons,\n        discountAmount,\n        giftCertificates,\n        handlingAmount,\n        headerLink,\n        lineItems,\n        onRemovedCoupon,\n        onRemovedGiftCertificate,\n        shippingAmount,\n        shopperCurrency,\n        storeCreditAmount,\n        storeCurrency,\n        subtotalAmount,\n        taxes,\n        total,\n    ]);\n\n    return <ModalTrigger modal={ renderModal }>\n        { ({ onClick }) => <div\n            className=\"cartDrawer optimizedCheckout-orderSummary\"\n            onClick={ onClick }\n        >\n            <figure\n                className={ classNames(\n                    'cartDrawer-figure',\n                    { 'cartDrawer-figure--stack': getLineItemsCount(lineItems) > 1 }\n                ) }\n            >\n                <div className=\"cartDrawer-imageWrapper\">\n                    { getImage(lineItems) }\n                </div>\n            </figure>\n            <div className=\"cartDrawer-body\">\n                <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\n                    <TranslatedString\n                        data={ { count: getItemsCount(lineItems) } }\n                        id=\"cart.item_count_text\"\n                    />\n                </h3>\n                <a>\n                    <TranslatedString id=\"cart.show_details_action\" />\n                </a>\n            </div>\n            <div className=\"cartDrawer-actions\">\n                <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\n                    <ShopperCurrency amount={ total } />\n                </h3>\n            </div>\n        </div> }\n    </ModalTrigger>;\n};\n\nfunction getImage(lineItems: LineItemMap): ReactNode {\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\n\n    if (productWithImage && productWithImage.imageUrl) {\n        return <img\n            alt={ productWithImage.name }\n            data-test=\"cart-item-image\"\n            src={ productWithImage.imageUrl }\n        />;\n    }\n\n    if (lineItems.giftCertificates.length) {\n        return <IconGiftCertificate />;\n    }\n}\n\nexport default memo(OrderSummaryDrawer);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { withCheckout } from '../checkout';\nimport OrderSummaryDrawer from '../order/OrderSummaryDrawer';\n\nimport mapToCartSummaryProps from './mapToCartSummaryProps';\nimport withRedeemable from './withRedeemable';\nimport { WithCheckoutCartSummaryProps } from './CartSummary';\nimport EditLink from './EditLink';\n\nconst CartSummaryDrawer: FunctionComponent<WithCheckoutCartSummaryProps> = ({\n    cartUrl,\n    ...props\n}) => (\n    withRedeemable(OrderSummaryDrawer)({\n        ...props,\n        cartUrl,\n        headerLink: (\n            <EditLink\n                className=\"modal-header-link cart-modal-link\"\n                url={ cartUrl }\n            />\n        ),\n    })\n);\n\nexport default withCheckout(mapToCartSummaryProps)(memo(CartSummaryDrawer));\n"],"sourceRoot":""}