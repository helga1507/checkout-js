{"version":3,"sources":["webpack://checkout/./src/app/billing/getBillingMethodId.ts","webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","state","isResettingAddress","addressFormRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","hasSaveAddressFeature","values","shouldRenderStaticAddress","methodId","allFormFields","countryCode","customFormFields","filter","custom","hasCustomFormFields","length","editableFormFields","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","AddressForm","formFields","shouldShowSaveAddress","OrderComments","Button","disabled","type","variant","Primary","TranslatedString","withLanguage","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","getAddressCustomFieldsValidationSchema","enableReinitialize","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","addressValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","isInitializing","Legend","testId","unmountContentWhenLoading","withCheckout","checkoutService","checkoutState","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","enableOrderComments","features","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-a823ff30.js","sourcesContent":["import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressCustomFieldsValidationSchema, getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    hasSaveAddressFeature: boolean;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses, isGuest },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            hasSaveAddressFeature,\n            values,\n            methodId,\n        } = this.props;\n\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\n        const allFormFields = getFields(values.countryCode);\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\n        const hasCustomFormFields = customFormFields.length > 0;\n        const editableFormFields = shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                { shouldRenderStaticAddress && billingAddress &&\n                    <div className={ 'form-fieldset' }>\n                        <StaticBillingAddress address={ billingAddress } />\n                    </div> }\n\n                <Fieldset id=\"checkoutBillingAddress\" ref={ this.addressFormRef }>\n                    { hasAddresses && !shouldRenderStaticAddress &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset> }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                countryCode={ values.countryCode }\n                                formFields={ editableFormFields }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                setFieldValue={ setFieldValue }\n                                shouldShowSaveAddress={ hasSaveAddressFeature && !isGuest }\n                            />\n                        </LoadingOverlay> }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments /> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        isLoading={ isUpdating || isResettingAddress }\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: BillingFormProps & WithLanguageProps) => methodId === 'amazonpay' ?\n        (lazy<Partial<AddressFormValues>>(values => getAddressCustomFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))) :\n        (lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport getBillingMethodId from './getBillingMethodId';\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    hasSaveAddressFeature: boolean;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <BillingForm\n                        { ...props }\n                        onSubmit={ this.handleSubmit }\n                        updateAddress={ updateAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        hasSaveAddressFeature: features['CHECKOUT-4642.uco_save_address_checkbox'],\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}