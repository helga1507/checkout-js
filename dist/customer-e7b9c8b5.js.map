{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/EmailLoginForm.tsx","webpack://checkout/./src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","labelContent","onChange","name","renderField","field","checked","value","testId","render","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","withLanguage","data","language","onClick","translatedString","translate","parsedString","length","href","preventDefault","EMAIL_REGEXP","getEmailValidationSchema","email","max","matches","required","renderInput","props","TextInput","autoComplete","TranslatedString","FormField","input","mapPropsToValues","handleSubmit","values","onSendLoginEmail","validationSchema","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","modalHeaderStringId","okButton","Button","footer","status","LoadingSpinner","isLoading","sent_email","variant","Primary","error","Alert","Error","form","expiry","TranslatedHtml","formEmail","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","Form","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","Fieldset","requiresMarketingConsent","Input","Label","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","concat","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","fieldProps","legend","Legend","hidden","BasicFormField","PrivacyPolicyField","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","openByDefault","toggle","rel","target","password","onSignIn","canCancel","createAccountUrl","isSignInEmailEnabled","isSigningIn","onCancel","signInError","viewType","changeEmailLink","body","mapErrorMessage","key","CustomerViewType","SuggestedLogin","Info","Login","CancellableEnforcedLogin","EnforcedLogin","undefined","disabled","state","isEmailLoginFormOpen","hasRequestedLoginEmail","closeEmailLoginFormForm","setState","handleEmailLoginClicked","this","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","continueAsGuest","onChangeViewType","onContinueAsGuestError","trim","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","handleSignIn","credentials","signIn","onSignInError","handleCancelSignIn","clearError","Guest","handleChangeEmail","handleShowLogin","componentDidMount","onReady","renderEmailLoginFormForm","renderGuestForm","renderLoginForm","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isSendingSignInEmail","signInEmailError","signInEmail","isEmbedded","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCheckout","getSignInEmail","getConfig","errors","getSignInError","getSignInEmailError","statuses","billingAddress","checkout","config","checkoutSettings","shopperConfig","showNewsletterSignup","remoteCheckoutProviders","sendSignInEmail","links","createAccountLink","defaultNewsletterSignup","firstName","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout"],"mappings":"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","file":"customer-e7b9c8b5.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { EMAIL_REGEXP } from './validationPatterns';\n\nexport interface EmailValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport default function getEmailValidationSchema({\n    language,\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\n    return object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n    });\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingSpinner } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport EmailField from './EmailField';\n\nexport interface EmailLoginFormProps {\n    email?: string;\n    isOpen: boolean;\n    isSendingEmail?: boolean;\n    emailHasBeenRequested?: boolean;\n    sentEmail?: SignInEmail;\n    sentEmailError?: any;\n    onRequestClose?(): void;\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\n}\n\nexport interface EmailLoginFormValues {\n    email: string;\n}\n\nconst EmailLoginForm: FunctionComponent<EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>> = ({\n    email,\n    isOpen,\n    isSendingEmail = false,\n    emailHasBeenRequested,\n    onRequestClose = noop,\n    sentEmailError,\n    sentEmail,\n    submitForm,\n    values: {\n        email: formEmail,\n    },\n}) => {\n    const modalHeaderStringId = useMemo(() => {\n        if (emailHasBeenRequested) {\n            if (sentEmailError) {\n                return 'common.error_heading';\n            }\n\n            return 'login_email.sent_header';\n        }\n\n        if (email) {\n            return 'login_email.header_with_email';\n        }\n\n        return 'login_email.header';\n    }, [emailHasBeenRequested, sentEmailError, email]);\n\n    const okButton = useMemo(() => (\n        <div className=\"modal-footer\">\n            <Button onClick={ onRequestClose }>\n                <TranslatedString id=\"common.ok_action\" />\n            </Button>\n        </div>\n    ), [onRequestClose]);\n\n    const footer = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return okButton;\n        }\n\n        if (emailHasBeenRequested && !sentEmailError) {\n            if (isSendingEmail) {\n                return <LoadingSpinner isLoading />;\n            }\n\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\n                return okButton;\n            }\n\n            return (\n                <p>\n                    <TranslatedLink\n                        id=\"login_email.resend_link\"\n                        onClick={ submitForm }\n                    />\n                    <TranslatedLink\n                        id=\"login_email.use_password_link\"\n                        onClick={ onRequestClose }\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"modal-footer\">\n                <Button\n                    className=\"optimizedCheckout-buttonSecondary\"\n                    onClick={ onRequestClose }\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.go_back\" />\n                </Button>\n                <Button\n                    isLoading={ isSendingEmail }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"login_email.send\" />\n                </Button>\n            </div>\n        );\n    }, [\n        sentEmailError,\n        emailHasBeenRequested,\n        okButton,\n        submitForm,\n        isSendingEmail,\n        onRequestClose,\n        sentEmail,\n    ]);\n\n    const error = useMemo(() => {\n        if (!sentEmailError) {\n            return null;\n        }\n\n        const { status } = sentEmailError;\n\n        return (\n            <Alert type={ AlertType.Error }>\n                { status === 429 ?\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" /> :\n                    <TranslatedString id={ status === 404 ?\n                        'login_email.error_not_found' :\n                        'login_email.error_server' }\n                    /> }\n            </Alert>\n        );\n    }, [sentEmailError]);\n\n    const form = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return null;\n        }\n\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\n            const { expiry, sent_email } = sentEmail;\n\n            return (\n                <p>\n                    <TranslatedHtml\n                        data={ {\n                            email: formEmail,\n                            minutes: Math.round(expiry / 60),\n                        } }\n                        id={ sent_email === 'sign_in' ?\n                            'login_email.sent_text' :\n                            'customer.reset_password_before_login_error' }\n                    />\n                </p>\n            );\n        }\n\n        if (emailHasBeenRequested && !sentEmail) {\n            return <EmailField />;\n        }\n\n        return (<>\n            <p>\n                <TranslatedString id=\"login_email.text\" />\n            </p>\n            <EmailField />\n        </>);\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\n\n    return (\n        <Modal\n            additionalBodyClassName=\"modal--withText\"\n            additionalModalClassName=\"modal--medium\"\n            header={\n                <ModalHeader>\n                    <TranslatedString id={ modalHeaderStringId } />\n                </ModalHeader>\n            }\n            isOpen={ isOpen }\n            onRequestClose={ onRequestClose }\n            shouldShowCloseButton={ true }\n        >\n            <Form>\n                <LoadingSpinner isLoading={ isSendingEmail && !email } />\n                { error }\n                { form }\n                { footer }\n            </Form>\n        </Modal>);\n};\n\nexport default withLanguage(withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n    }),\n    handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\n        onSendLoginEmail(values);\n    },\n    validationSchema: ({ language }: WithLanguageProps) => getEmailValidationSchema({ language }),\n})(memo(EmailLoginForm)));\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <CheckboxFormField\n        labelContent={ <TranslatedHtml data={ { url } } id=\"privacy_policy.label\" /> }\n        name=\"privacyPolicy\"\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink url={ url } />\n    </Fieldset>\n);\n\nexport default memo(PrivacyPolicyFieldset);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field, requiresMarketingConsent }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id={ requiresMarketingConsent ?\n                'customer.guest_marketing_consent' :\n                'customer.guest_subscribe_to_newsletter_text' }\n            />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FieldProps, FormikProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n}) => {\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n        <SubscribeField\n            { ...fieldProps }\n            requiresMarketingConsent={ requiresMarketingConsent }\n        />\n    ), [\n        requiresMarketingConsent,\n    ]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <p>\n                    <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n                </p>\n\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={ onChangeEmail } />\n\n                        { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                            name=\"shouldSubscribe\"\n                            render={ renderField }\n                        /> }\n\n                        { privacyPolicyUrl && <PrivacyPolicyField\n                            url={ privacyPolicyUrl }\n                        /> }\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={ isContinuingAsGuest }\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ ButtonVariant.Primary }\n                        >\n                            <TranslatedString id=\"customer.continue_as_guest_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                <p>\n                    <TranslatedString id=\"customer.login_text\" />\n                    { ' ' }\n                    <a\n                        data-test=\"customer-continue-button\"\n                        id=\"checkout-customer-login\"\n                        onClick={ onShowLogin }\n                    >\n                        <TranslatedString id=\"customer.login_action\" />\n                    </a>\n                </p>\n\n                { checkoutButtons }\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n        requiresMarketingConsent,\n    }) => ({\n        email,\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n        privacyPolicy: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        const baseSchema = object({ email });\n\n        if (privacyPolicyUrl) {\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\n                isRequired: !!privacyPolicyUrl,\n                language,\n            }));\n        }\n\n        return baseSchema;\n    },\n})(memo(GuestForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean()\n            .oneOf([true], language.translate('privacy_policy.required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl?: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => {\n        if (!forgotPasswordUrl) {\n            return null;\n        }\n\n        return <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>;\n    }, [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport mapErrorMessage from './mapErrorMessage';\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSignInEmailEnabled?: boolean;\n    isSendingSignInEmail?: boolean;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    signInEmailError?: Error;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    passwordlessLogin?: boolean;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onSendLoginEmail?(): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    email,\n    isSignInEmailEnabled,\n    isSigningIn,\n    language,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    onSendLoginEmail = noop,\n    signInError,\n    viewType = CustomerViewType.Login,\n}) => {\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={ { email } }\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={ onCancel }\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.returning_customer_text\" />\n                </Legend>\n            }\n            >\n                { signInError && <Alert\n                    testId=\"customer-login-error-message\"\n                    type={ AlertType.Error }\n                >\n                    { mapErrorMessage(signInError, key => language.translate(key)) }\n                </Alert> }\n\n                { viewType === CustomerViewType.SuggestedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_could_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.Login && <p>\n                    <TranslatedHtml\n                        data={ { url: createAccountUrl } }\n                        id=\"customer.create_account_to_continue_text\"\n                    />\n                </p> }\n\n                { viewType === CustomerViewType.CancellableEnforcedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_must_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.EnforcedLogin &&\n                    <Alert type={ AlertType.Error }>\n                        <TranslatedHtml\n                            data={ { url: createAccountUrl } }\n                            id=\"customer.guest_temporary_disabled\"\n                        />\n                    </Alert> }\n\n                { (viewType === CustomerViewType.Login || viewType === CustomerViewType.EnforcedLogin) &&\n                    <EmailField onChange={ onChangeEmail } /> }\n\n                <PasswordField forgotPasswordUrl={ isSignInEmailEnabled ? undefined : forgotPasswordUrl } />\n\n                { isSignInEmailEnabled && <p>\n                    <TranslatedLink\n                        id=\"login_email.link\"\n                        onClick={ onSendLoginEmail }\n                        testId=\"customer-signin-link\"\n                    />\n                </p> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isSigningIn }\n                        id=\"checkout-customer-continue\"\n                        testId=\"customer-continue-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>\n\n                    { viewType === CustomerViewType.SuggestedLogin && <a\n                        className=\"button optimizedCheckout-buttonSecondary\"\n                        data-test=\"customer-guest-continue\"\n                        href=\"#\"\n                        id=\"checkout-guest-continue\"\n                        onClick={ preventDefault(onContinueAsGuest) }\n                    >\n                        <TranslatedString id=\"customer.continue_as_guest_action\" />\n                    </a> }\n\n                    { canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin &&\n                        <a\n                            className=\"button optimizedCheckout-buttonSecondary\"\n                            data-test=\"customer-cancel-button\"\n                            href=\"#\"\n                            id=\"checkout-customer-cancel\"\n                            onClick={ preventDefault(onCancel) }\n                        >\n                            <TranslatedString id={ viewType === CustomerViewType.CancellableEnforcedLogin ?\n                                'login_email.use_another_email' :\n                                'common.cancel_action' }\n                            />\n                        </a> }\n                </div>\n\n                { viewType === CustomerViewType.SuggestedLogin && changeEmailLink() }\n            </Fieldset>\n        </Form>);\n};\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        getEmailValidationSchema({ language }).concat(object({\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        })),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials, SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    isEmbedded?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSendingSignInEmail: boolean;\n    isSignInEmailEnabled: boolean;\n    isSigningIn: boolean;\n    privacyPolicyUrl?: string;\n    requiresMarketingConsent: boolean;\n    signInEmail?: SignInEmail;\n    signInEmailError?: Error;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nexport interface CustomerState {\n    isEmailLoginFormOpen: boolean;\n    hasRequestedLoginEmail: boolean;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\n    state: CustomerState = {\n        isEmailLoginFormOpen: false,\n        hasRequestedLoginEmail: false,\n    };\n\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const {\n            onReady = noop,\n            email,\n        } = this.props;\n\n        this.draftEmail = email;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n        const { isEmailLoginFormOpen } = this.state;\n\n        return (\n            <Fragment>\n                { isEmailLoginFormOpen && this.renderEmailLoginFormForm() }\n                { (viewType === CustomerViewType.Guest) ?\n                    this.renderGuestForm() :\n                    this.renderLoginForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                privacyPolicyUrl={ privacyPolicyUrl }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderEmailLoginFormForm(): ReactNode {\n        const {\n            isEmailLoginFormOpen,\n            hasRequestedLoginEmail,\n        } = this.state;\n\n        const {\n            isSendingSignInEmail,\n            signInEmailError,\n            signInEmail,\n        } = this.props;\n\n        return (\n            <EmailLoginForm\n                email={ this.draftEmail }\n                emailHasBeenRequested={ hasRequestedLoginEmail }\n                isOpen={ isEmailLoginFormOpen }\n                isSendingEmail={ isSendingSignInEmail }\n                onRequestClose={ this.closeEmailLoginFormForm }\n                onSendLoginEmail={ this.handleSendLoginEmail }\n                sentEmail={ signInEmail }\n                sentEmailError={ signInEmailError }\n            />\n        );\n    }\n\n    private closeEmailLoginFormForm: () => void = () => {\n        this.setState({\n            isEmailLoginFormOpen: false,\n            hasRequestedLoginEmail: false,\n        });\n    };\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            isEmbedded,\n            email,\n            forgotPasswordUrl,\n            isSignInEmailEnabled,\n            isGuestEnabled,\n            isSendingSignInEmail,\n            isSigningIn,\n            onContinueAsGuest,\n            signInError,\n            viewType,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSendingSignInEmail={ isSendingSignInEmail }\n                isSignInEmailEnabled={ isSignInEmailEnabled && !isEmbedded }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ onContinueAsGuest }\n                onSendLoginEmail={ this.handleEmailLoginClicked }\n                onSignIn={ this.handleSignIn }\n                signInError={ signInError }\n                viewType={ viewType }\n            />\n        );\n    }\n\n    private handleEmailLoginClicked: () => void = async () => {\n        const { viewType } = this.props;\n\n        try {\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\n                await this.handleSendLoginEmail({ email: this.draftEmail });\n            }\n        } finally {\n            this.setState({\n                isEmailLoginFormOpen: true,\n            });\n        }\n    };\n\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async values => {\n        const {\n            sendLoginEmail,\n        } = this.props;\n\n        try {\n            await sendLoginEmail(values);\n        } finally {\n            this.setState({\n                hasRequestedLoginEmail: true,\n            });\n        }\n    };\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onChangeViewType = noop,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n        try {\n            const { data } = await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n\n            const customer = data.getCustomer();\n\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest) {\n                return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            onContinueAsGuest();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (error.type === 'update_subscriptions') {\n                this.draftEmail = undefined;\n\n                return onContinueAsGuest();\n            }\n\n            if (error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getSignInEmail, getConfig },\n        errors: { getSignInError, getSignInEmailError },\n        statuses: { isContinuingAsGuest, isSigningIn, isSendingSignInEmail },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const signInEmail = getSignInEmail();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    // todo: add isSignInEmailEnabled to SDK\n    const { checkoutSettings: {\n        privacyPolicyUrl,\n        requiresMarketingConsent,\n        isSignInEmailEnabled,\n    } } = config as any;\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        // todo: remove casting when method is properly exposed.\n        sendLoginEmail: (checkoutService as any).sendSignInEmail as (params: { email: string }) => Promise<CheckoutSelectors>,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: (billingAddress && billingAddress.email) || (customer && customer.email),\n        firstName: customer && customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isSignInEmailEnabled,\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        isSendingSignInEmail: isSendingSignInEmail(),\n        signInEmail,\n        signInEmailError: getSignInEmailError(),\n        privacyPolicyUrl,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}